// <auto-generated />
using System;
using IntegratedCourseSystem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IntegratedCourseSystem.Migrations
{
    [DbContext(typeof(IntegratedCourseSystemContext))]
    [Migration("20210324194109_AreGroupsDefined_ClassModel")]
    partial class AreGroupsDefined_ClassModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DataBase.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("DataBase.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AreGroupsDefined")
                        .HasColumnType("boolean");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("invitecode");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("maxcapacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("teacherid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("classes");
                });

            modelBuilder.Entity("DataBase.Models.ClassRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoleId");

                    b.ToTable("ClassRoles");
                });

            modelBuilder.Entity("DataBase.Models.ClassSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("classid");

                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subjectid");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("classsubjects");
                });

            modelBuilder.Entity("DataBase.Models.ClassTech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("TechId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TechId");

                    b.ToTable("ClassTeches");
                });

            modelBuilder.Entity("DataBase.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("taskid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("DataBase.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("faculties");
                });

            modelBuilder.Entity("DataBase.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Classid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("classid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Classid");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("DataBase.Models.GroupTech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Groupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("groupid");

                    b.Property<int>("Techid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("techid");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.HasIndex("Techid");

                    b.ToTable("grouptechs");
                });

            modelBuilder.Entity("DataBase.Models.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("classid");

                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("studentid");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("questionnaires");
                });

            modelBuilder.Entity("DataBase.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("DataBase.Models.RolePreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PreferenceLevel")
                        .HasColumnType("integer")
                        .HasColumnName("preferencelevel");

                    b.Property<int>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("questionnaireid");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("RoleId");

                    b.ToTable("rolepreferences");
                });

            modelBuilder.Entity("DataBase.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("students");
                });

            modelBuilder.Entity("DataBase.Models.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("groupid");

                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("studentid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("studentgroups");
                });

            modelBuilder.Entity("DataBase.Models.StudentRolePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Beginning")
                        .HasColumnType("date")
                        .HasColumnName("datestart");

                    b.Property<DateTime>("Ending")
                        .HasColumnType("date")
                        .HasColumnName("dateend");

                    b.Property<int>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("questionnaireid");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("RoleId");

                    b.ToTable("studentroleperiods");
                });

            modelBuilder.Entity("DataBase.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("DataBase.Models.SubjectQuestionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("classsubjectid");

                    b.Property<int>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("questionnaireid");

                    b.HasKey("Id");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("subjectquestionnaires");
                });

            modelBuilder.Entity("DataBase.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActualGrade")
                        .HasColumnType("integer")
                        .HasColumnName("actualgrade");

                    b.Property<int>("ClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("classsubjectid");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deadline");

                    b.Property<DateTime?>("Done")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("done");

                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("groupid");

                    b.Property<int>("MaxGrade")
                        .HasColumnType("integer")
                        .HasColumnName("maxgrade");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Posted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text")
                        .HasColumnName("taskdescription");

                    b.HasKey("Id");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("GroupId");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("DataBase.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("facultyid");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("isverified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("teachers");
                });

            modelBuilder.Entity("DataBase.Models.TeammateAntipreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EnemyId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("enemyid1");

                    b.Property<int?>("EnemyId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("enemyid2");

                    b.Property<int?>("EnemyId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("enemyid3");

                    b.Property<int>("InitiatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("initiatorid");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId1");

                    b.HasIndex("EnemyId2");

                    b.HasIndex("EnemyId3");

                    b.HasIndex("InitiatorId");

                    b.ToTable("teammateantipreferences");
                });

            modelBuilder.Entity("DataBase.Models.TeammatePreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FriendId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("friendid1");

                    b.Property<int>("FriendId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("friendid2");

                    b.Property<int>("FriendId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("friendid3");

                    b.Property<int>("InitiatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("initiatorid");

                    b.HasKey("Id");

                    b.HasIndex("FriendId1");

                    b.HasIndex("FriendId2");

                    b.HasIndex("FriendId3");

                    b.HasIndex("InitiatorId");

                    b.ToTable("teammatepreferences");
                });

            modelBuilder.Entity("DataBase.Models.Tech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("techs");
                });

            modelBuilder.Entity("DataBase.Models.TechPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PreferenceLevel")
                        .HasColumnType("integer")
                        .HasColumnName("preferencelevel");

                    b.Property<int>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("questionnaireid");

                    b.Property<int>("TechId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("techid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("TechId");

                    b.ToTable("techpreferences");
                });

            modelBuilder.Entity("DataBase.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DataBase.Models.Admin", b =>
                {
                    b.HasOne("DataBase.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("DataBase.Models.Admin", "Id")
                        .HasConstraintName("admins_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataBase.Models.Class", b =>
                {
                    b.HasOne("DataBase.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("classes_teacherid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DataBase.Models.ClassRole", b =>
                {
                    b.HasOne("DataBase.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataBase.Models.ClassSubject", b =>
                {
                    b.HasOne("DataBase.Models.Class", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("classsubjects_classid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("classsubjects_subjectid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataBase.Models.ClassTech", b =>
                {
                    b.HasOne("DataBase.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Tech", "Tech")
                        .WithMany()
                        .HasForeignKey("TechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Tech");
                });

            modelBuilder.Entity("DataBase.Models.Comment", b =>
                {
                    b.HasOne("DataBase.Models.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("comments_taskid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("comments_userid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataBase.Models.Group", b =>
                {
                    b.HasOne("DataBase.Models.Class", "Class")
                        .WithMany("Groups")
                        .HasForeignKey("Classid")
                        .HasConstraintName("groups_classid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DataBase.Models.GroupTech", b =>
                {
                    b.HasOne("DataBase.Models.Group", "Group")
                        .WithMany("Groupteches")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("grouptechs_groupid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Tech", "Tech")
                        .WithMany("GroupTeches")
                        .HasForeignKey("Techid")
                        .HasConstraintName("grouptechs_techid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Tech");
                });

            modelBuilder.Entity("DataBase.Models.Questionnaire", b =>
                {
                    b.HasOne("DataBase.Models.Class", "Class")
                        .WithMany("Questionnaires")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("questionnaires_classid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Student", "Student")
                        .WithMany("Questionnaires")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("questionnaires_studentid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataBase.Models.RolePreference", b =>
                {
                    b.HasOne("DataBase.Models.Questionnaire", "Questionnaire")
                        .WithMany("RolePreferences")
                        .HasForeignKey("QuestionnaireId")
                        .HasConstraintName("rolepreferences_questionnaireid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Role", "Role")
                        .WithMany("RolePreferences")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("rolepreferences_roleid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataBase.Models.Student", b =>
                {
                    b.HasOne("DataBase.Models.User", "IdNavigation")
                        .WithOne("Student")
                        .HasForeignKey("DataBase.Models.Student", "Id")
                        .HasConstraintName("students_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("DataBase.Models.StudentGroup", b =>
                {
                    b.HasOne("DataBase.Models.Group", "Group")
                        .WithMany("Studentgroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("studentgroups_groupid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Student", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("studentgroups_studentid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataBase.Models.StudentRolePeriod", b =>
                {
                    b.HasOne("DataBase.Models.Questionnaire", "Questionnaire")
                        .WithMany("StudentRolePeriods")
                        .HasForeignKey("QuestionnaireId")
                        .HasConstraintName("studentroleperiods_questionnaireid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Role", "Role")
                        .WithMany("StudentRolePeriods")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("studentroleperiods_roleid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataBase.Models.SubjectQuestionnaire", b =>
                {
                    b.HasOne("DataBase.Models.ClassSubject", "ClassSubject")
                        .WithMany("SubjectQuestionnaires")
                        .HasForeignKey("ClassSubjectId")
                        .HasConstraintName("subjectquestionnaires_classsubjectid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Questionnaire", "Questionnaire")
                        .WithMany("SubjectQuestionnaires")
                        .HasForeignKey("QuestionnaireId")
                        .HasConstraintName("subjectquestionnaires_questionnaireid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubject");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("DataBase.Models.Task", b =>
                {
                    b.HasOne("DataBase.Models.ClassSubject", "ClassSubject")
                        .WithMany("Tasks")
                        .HasForeignKey("ClassSubjectId")
                        .HasConstraintName("tasks_classsubjectid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Group", "Group")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("tasks_groupid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubject");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DataBase.Models.Teacher", b =>
                {
                    b.HasOne("DataBase.Models.Faculty", "Faculty")
                        .WithMany("Teachers")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("teachers_facultyid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("DataBase.Models.Teacher", "Id")
                        .HasConstraintName("teachers_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataBase.Models.TeammateAntipreference", b =>
                {
                    b.HasOne("DataBase.Models.Student", "Enemy1")
                        .WithMany("WhereEnemy1")
                        .HasForeignKey("EnemyId1")
                        .HasConstraintName("teammateantipreferences_enemyid1_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Student", "Enemy2")
                        .WithMany("WhereEnemy2")
                        .HasForeignKey("EnemyId2")
                        .HasConstraintName("teammateantipreferences_enemyid2_fkey");

                    b.HasOne("DataBase.Models.Student", "Enemy3")
                        .WithMany("WhereEnemy3")
                        .HasForeignKey("EnemyId3")
                        .HasConstraintName("teammateantipreferences_enemyid3_fkey");

                    b.HasOne("DataBase.Models.Questionnaire", "Initiator")
                        .WithMany("TeammateAntipreferences")
                        .HasForeignKey("InitiatorId")
                        .HasConstraintName("teammateantipreferences_initiatorid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy1");

                    b.Navigation("Enemy2");

                    b.Navigation("Enemy3");

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("DataBase.Models.TeammatePreference", b =>
                {
                    b.HasOne("DataBase.Models.Student", "Friend1")
                        .WithMany("WhereFriend1")
                        .HasForeignKey("FriendId1")
                        .HasConstraintName("teammatepreferences_friendid1_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Student", "Friend2")
                        .WithMany("WhereFriend2")
                        .HasForeignKey("FriendId2")
                        .HasConstraintName("teammatepreferences_friendid2_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Student", "Friend3")
                        .WithMany("WhereFriend3")
                        .HasForeignKey("FriendId3")
                        .HasConstraintName("teammatepreferences_friendid3_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Questionnaire", "Initiator")
                        .WithMany("TeammatePreferences")
                        .HasForeignKey("InitiatorId")
                        .HasConstraintName("teammatepreferences_initiatorid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend1");

                    b.Navigation("Friend2");

                    b.Navigation("Friend3");

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("DataBase.Models.TechPreference", b =>
                {
                    b.HasOne("DataBase.Models.Questionnaire", "Questionnaire")
                        .WithMany("TechPreferences")
                        .HasForeignKey("QuestionnaireId")
                        .HasConstraintName("techpreferences_questionnaireid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Tech", "Tech")
                        .WithMany("TechPreferences")
                        .HasForeignKey("TechId")
                        .HasConstraintName("techpreferences_techid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("Tech");
                });

            modelBuilder.Entity("DataBase.Models.Class", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("Groups");

                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("DataBase.Models.ClassSubject", b =>
                {
                    b.Navigation("SubjectQuestionnaires");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DataBase.Models.Faculty", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("DataBase.Models.Group", b =>
                {
                    b.Navigation("Groupteches");

                    b.Navigation("Studentgroups");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DataBase.Models.Questionnaire", b =>
                {
                    b.Navigation("RolePreferences");

                    b.Navigation("StudentRolePeriods");

                    b.Navigation("SubjectQuestionnaires");

                    b.Navigation("TeammateAntipreferences");

                    b.Navigation("TeammatePreferences");

                    b.Navigation("TechPreferences");
                });

            modelBuilder.Entity("DataBase.Models.Role", b =>
                {
                    b.Navigation("RolePreferences");

                    b.Navigation("StudentRolePeriods");
                });

            modelBuilder.Entity("DataBase.Models.Student", b =>
                {
                    b.Navigation("Questionnaires");

                    b.Navigation("StudentGroups");

                    b.Navigation("WhereEnemy1");

                    b.Navigation("WhereEnemy2");

                    b.Navigation("WhereEnemy3");

                    b.Navigation("WhereFriend1");

                    b.Navigation("WhereFriend2");

                    b.Navigation("WhereFriend3");
                });

            modelBuilder.Entity("DataBase.Models.Subject", b =>
                {
                    b.Navigation("ClassSubjects");
                });

            modelBuilder.Entity("DataBase.Models.Task", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DataBase.Models.Teacher", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DataBase.Models.Tech", b =>
                {
                    b.Navigation("GroupTeches");

                    b.Navigation("TechPreferences");
                });

            modelBuilder.Entity("DataBase.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Comments");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
